buildscript {

    repositories {
        jcenter()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'maven'

repositories {
    jcenter()
}


android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'
    useLibrary 'org.apache.http.legacy'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 10
        versionName "0.1.2"
        project.archivesBaseName = "andcommon"
        multiDexEnabled true
        project.version = android.defaultConfig.versionName
    }

    buildTypes {
        all {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
//        abortOnError false
    }
    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                def fileName = "${archivesBaseName}-${version}.aar"
                output.outputFile = new File(outputFile.parent, fileName)

//                output.outputFile = new File("/home/pepperonas/IdeaProjects/Libraries/Base/test_lib/libs", fileName)
//                output.outputFile = new File("/home/pepperonas/IdeaProjects/Libraries/Base/sample_activityrecognition/libs", fileName)
//                output.outputFile = new File("/home/pepperonas/IdeaProjects/Libraries/Base/sample_splashview/libs", fileName)
//                output.outputFile = new File("/home/pepperonas/IdeaProjects/Libraries/Base/sample_recordbreaker/libs", fileName)
            }
        }
    }
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    artifacts.add('archives', task);
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:support-v4:23.1.1'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.google.android.gms:play-services:8.4.0'
    compile 'com.android.support:support-annotations:23.1.1'
    compile project(':jbasx')
    compile files('libs/jbasx-0.1.1.jar')
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.9.5'
}
